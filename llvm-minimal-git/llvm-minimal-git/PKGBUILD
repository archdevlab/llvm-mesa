# _     _            _        _          _____
#| |__ | | __ _  ___| | _____| | ___   _|___ /
#| '_ \| |/ _` |/ __| |/ / __| |/ / | | | |_ \
#| |_) | | (_| | (__|   <\__ \   <| |_| |___) |
#|_.__/|_|\__,_|\___|_|\_\___/_|\_\\__, |____/
#                                  |___/

#Maintainer: blacksky3 <https://github.com/blacksky3>
#Credits: Evangelos Foutras <evangelos@foutrelis.com>
#Credits: Jan "heftig" Steffens <jan.steffens@gmail.com>
#Credits: Daniel Bermond <dbermond@archlinux.org>
#Credits: Bruno Pagani <archange@archlinux.org>
#Credits: Lone_Wolf <lone_wolf@klaas-de-kat.nl>

pkgbase=llvm-minimal-git
pkgname=(llvm-minimal-git clang-minimal-git llvm-libs-minimal-git clang-libs-minimal-git spirv-llvm-translator-minimal-git)
url='https://llvm.org/'
pkgver=17.0.0
pkgrel=1
_pkgver=17.0.0
llvmcommit=4a5b5bf318a858e07d1916e798adc2a1aebd56d3
spirvcommit=e4dfa92a3b1bd57ebfdcfeed4d48dfe260387032
arch=(x86_64)
license=('custom:Apache 2.0 with LLVM Exception')
makedepends=(cmake ninja zlib zstd libffi libedit ncurses
             libxml2 python-setuptools python-psutil python-sphinx
             python-recommonmark spirv-headers-git)
options=(staticlibs !lto) # Getting thousands of test failures with LTO
source=(git+https://github.com/llvm/llvm-project.git#commit=$llvmcommit
        git+https://github.com/KhronosGroup/SPIRV-LLVM-Translator.git#commit=$spirvcommit
        llvm-config.h)

# Both ninja & LIT by default use all available cores. this can lead to heavy stress on systems making them unresponsive.
# It can also happen that the kernel oom killer interferes and kills important tasks.
# A reasonable value for them to avoid these issues appears to be 75% of available cores.
# NINJAFLAGS and LITFLAGS are env vars that can be used to achieve this. They should be set on command line or in files read by your shell on login (like .bashrc ) .
# example for systems with 24 cores
NINJAFLAGS="-j 18 -l 18"
# LITFLAGS="-j 18"
# NOTE: It's your responbility to validate the value of NINJAFLAGS and LITFLAGS. If unsure, don't set it.

# Utilizing LLVM_DISTRIBUTION_COMPONENTS to avoid
# installing static libraries; inspired by Gentoo
_get_distribution_components(){
  local target
  ninja -t targets | grep -Po 'install-\K.*(?=-stripped:)' | while read -r target; do
    case $target in
      clang-libraries|distribution)
        continue
        ;;
      clang-tidy-headers)
        continue
        ;;
      clang|clangd|clang-*)
        ;;
      clang*|findAllSymbols)
        continue
        ;;
      llvm-libraries|distribution)
        continue
        ;;
      # shared libraries
      LLVM|LLVMgold)
        ;;
      # libraries needed for clang-tblgen
      LLVMDemangle|LLVMSupport|LLVMTableGen)
        ;;
      # exclude static libraries
      LLVM*)
        continue
        ;;
      # exclude llvm-exegesis (doesn't seem useful without libpfm)
      llvm-exegesis)
        continue
        ;;
    esac
    echo $target
  done
}

pkgver(){
  cd ${srcdir}/llvm-project/llvm/

  # This will almost match the output of `llvm-config --version` when the
  # LLVM_APPEND_VC_REV cmake flag is turned on. The only difference is
  # dash being replaced with underscore because of Pacman requirements.
  local _pkgver=$(awk -F 'MAJOR |MINOR |PATCH |)' \
  'BEGIN { ORS="." ; i=0 } \
  /set\(LLVM_VERSION_/ { print $2 ; i++ ; if (i==2) ORS="" } \
  END { print "\n" }' \
  CMakeLists.txt).r$(git rev-list --count HEAD).g$(git rev-parse --short HEAD)
  echo "$_pkgver"
}

prepare(){
  # Attempt to convert script to Python 3
  2to3 -wn --no-diffs \
    ${srcdir}/llvm-project/clang-tools-extra/clang-include-fixer/find-all-symbols/tool/run-find-all-symbols.py
}

build(){
export CFLAGS+=" ${CPPFLAGS}"
export CXXFLAGS+=" ${CPPFLAGS}"

  cd ${srcdir}/llvm-project/llvm/

  rm -rf build/

  mkdir build/

  cd build/

  local cmake_args=(
    -G Ninja
    -DCMAKE_BUILD_TYPE=Release
    -DCMAKE_INSTALL_PREFIX=/usr
    -DLLVM_BINUTILS_INCDIR=/usr/include
    -DFFI_INCLUDE_DIR=$(pkg-config --variable=includedir libffi)
    -DLLVM_VERSION_SUFFIX=""
    -DLLVM_APPEND_VC_REV=ON
    -DLLVM_HOST_TRIPLE=$CHOST
    -DLLVM_TARGETS_TO_BUILD="AMDGPU;X86"
    -DLLVM_BUILD_LLVM_DYLIB=ON
    -DLLVM_LINK_LLVM_DYLIB=ON
    -DCLANG_LINK_CLANG_DYLIB=ON
    -DLLVM_DYLIB_COMPONENTS="all"
    -DLLVM_INSTALL_UTILS=ON
    -DLLVM_ENABLE_RTTI=ON
    -DLLVM_ENABLE_FFI=ON
    -DLLVM_USE_PERF=ON
    -DLLVM_INCLUDE_BENCHMARKS=OFF
    -DLLVM_INCLUDE_EXAMPLES=OFF
    -DLLVM_BUILD_DOCS=OFF
    -DLLVM_INCLUDE_DOCS=OFF
    -DLLVM_ENABLE_OCAMLDOC=OFF
    -DLLVM_ENABLE_SPHINX=OFF
    -DLLVM_ENABLE_DOXYGEN=OFF
    -DLLVM_ENABLE_BINDINGS=OFF
    -DLLVM_ENABLE_PROJECTS="compiler-rt;clang-tools-extra;clang"
    -DCOMPILER_RT_INSTALL_PATH=/usr/lib/clang/$_pkgver
    -DLLVM_ENABLE_DUMP=ON
    -DLLVM_EXTERNAL_PROJECTS="SPIRV-LLVM-Translator"
    -DLLVM_EXTERNAL_SPIRV_LLVM_TRANSLATOR_SOURCE_DIR="$srcdir"/SPIRV-LLVM-Translator
    -DLLVM_EXTERNAL_SPIRV_HEADERS_SOURCE_DIR=/usr/include/spirv/
    -DLLVM_SPIRV_INCLUDE_TESTS=OFF
    -DLLVM_LIT_ARGS="$LITFLAGS"" -sv --ignore-fail"
    -Wno-dev
  )

  cmake .. "${cmake_args[@]}"
  local distribution_components=$(_get_distribution_components | paste -sd\;)
  test -n "$distribution_components"
  cmake_args+=(-DLLVM_DISTRIBUTION_COMPONENTS="$distribution_components")

  cmake .. "${cmake_args[@]}"
  ninja $NINJAFLAGS
}

_python_optimize(){
  python -m compileall "$@"
  python -O -m compileall "$@"
  python -OO -m compileall "$@"
}

package_llvm-minimal-git(){
  pkgdesc='Collection of modular and reusable compiler and toolchain technologies (git version)'
  depends=(llvm-libs-minimal-git perl)
  optdepends=('python: for using lit (LLVM Integrated Tester)'
              'python-setuptools: for using lit')
  conflicts=(llvm)
  provides=(llvm)
  provides+=(llvm-minimal-git llvm-git)

  cd ${srcdir}/llvm-project/llvm/build/

  DESTDIR="$pkgdir" ninja $NINJAFLAGS install-distribution
  # Fix installing llvm-spirv because we use LLVM_DISTRIBUTION_COMPONENTS for LLVM/CLANG
  # So add the below
  DESTDIR="$pkgdir" ninja $NINJAFLAGS install llvm-spirv

  # Include lit for running lit-based tests in other projects
  pushd ${srcdir}/llvm-project/llvm/utils/lit/
  python3 setup.py install --root="$pkgdir" -O1
  popd

  # This is when we want llvm-libs-minimal-git to conflict with llvm-libs
  #  # The runtime libraries go into llvm-libs
  #  mv -f "$pkgdir"/usr/lib/lib{LLVM,LTO,Remarks}*.so* "$srcdir"
  #  mv -f "$pkgdir"/usr/lib/LLVMgold.so "$srcdir"

  # This is when we want to have llvm-libs and llvm-libs-minimal-git on the same system
  # Remove files which conflict with repo llvm-libs
  rm "$pkgdir"/usr/lib/{LLVMgold,lib{LLVM,LTO}}.so
  rm "$pkgdir"/usr/lib/libRemarks.so
  # The llvm runtime libraries go into llvm-libs-minimal-git
  mv -f "$pkgdir"/usr/lib/lib{LLVM-*.so,LTO.so.*,Remarks.so.*} "$srcdir"

  # The clang runtime libraries go into clang-libs-minimal-git
  # https://bugs.archlinux.org/task/72588?project=1&string=clang
  mv -f "$pkgdir"/usr/lib/libclang{,-cpp}.so* "$srcdir"

  # clang-minimal-git files go to a separate package
  mkdir -p "$srcdir"/clang/usr/{bin,include,lib,lib/cmake,share}
  mv -f "$pkgdir"/usr/lib/{libear,libscanbuild,libclang*.a,clang} "$srcdir"/clang/usr/lib
  mv -f "$pkgdir"/usr/lib/cmake/clang "$srcdir"/clang/usr/lib/cmake/
  mv -f "$pkgdir"/usr/include/{clang,clang-tidy,clang-c} "$srcdir"/clang/usr/include/
  mv -f "$pkgdir"/usr/libexec "$srcdir"/clang/usr/
  mv -f "$pkgdir"/usr/bin/{amdgpu-arch,analyze-build,c-index-test,clang*,diagtool,find-all-symbols,git-clang-format,hmaptool,intercept-build,modularize,nvptx-arch,pp-trace,run-clang-tidy,scan-build,scan-build-py,scan-view} "$srcdir"/clang/usr/bin/
  mv -f "$pkgdir"/usr/share/{clang,man,opt-viewer,scan-build,scan-view} "$srcdir"/clang/usr/share/

  # spirv-llvm-translator files go to a separate package
  mkdir -p "$srcdir"/spirv/usr/{bin,include/LLVMSPIRVLib/,lib/pkgconfig}
  mv "$pkgdir"/usr/bin/llvm-spirv "$srcdir"/spirv/usr/bin
  mv "$pkgdir"/usr/include/LLVMSPIRVLib/* "$srcdir"/spirv/usr/include/LLVMSPIRVLib/
  mv "$pkgdir"/usr/lib/libLLVMSPIRVLib.a "$srcdir"/spirv/usr/lib
  mv "$pkgdir"/usr/lib/pkgconfig/LLVMSPIRVLib.pc "$srcdir"/spirv/usr/lib/pkgconfig
  # Remove pkgconfig dir from llvm-minimal-git
  rm -rf "$pkgdir"/usr/lib/pkgconfig/
  rm -rf "$pkgdir"/usr/include/LLVMSPIRVLib/

  if [[ $CARCH == x86_64 ]]; then
    # Needed for multilib (https://bugs.archlinux.org/task/29951)
    # Header stub is taken from Fedora
    mv "$pkgdir/usr/include/llvm/Config/llvm-config"{,-64}.h
    cp "$srcdir/llvm-config.h" "$pkgdir/usr/include/llvm/Config/llvm-config.h"
  fi

  install -Dm644 "$srcdir/llvm-project/llvm/LICENSE.TXT" "$pkgdir/usr/share/licenses/$pkgname/LICENSE"
  install -Dm644 "$srcdir/llvm-project/llvm/CREDITS.TXT" "$pkgdir/usr/share/licenses/$pkgname/CREDITS"
  install -Dm644 "$srcdir/llvm-project/llvm/CODE_OWNERS.TXT" "$pkgdir/usr/share/licenses/$pkgname/CODE_OWNERS"
}

package_clang-minimal-git(){
  pkgdesc='C language family frontend for LLVM (git version)'
  depends=(llvm-libs-minimal-git clang-libs-minimal-git gcc)
  optdepends=('openmp: OpenMP support in clang with -fopenmp'
              'python: for scan-view, scan-build, git-clang-format, clang-rename and python bindings'
              'llvm-minimal-git: referenced by some clang headers')
  conflicts=(compiler-rt clang)
  provides=(compiler-rt clang clang-analyzer clang-tools-extra)
  provides+=(compiler-rt-minimal-git clang-minimal-git compiler-rt-git clang-git)
  replaces=(clang-analyzer clang-tools-extra)

  cp --preserve --recursive "$srcdir"/clang/* "$pkgdir"/

  # I think it's usefull to have this CLANG Python bindings since we ship complete CLANG
  # If I proove that it's not usefull we will remove the below
  # Move scanbuild-py into site-packages and install Python bindings
  local site_packages=$(python -c "import site; print(site.getsitepackages()[0])")
  install -d "$pkgdir/$site_packages"
  mv "$pkgdir"/usr/lib/{libear,libscanbuild} "$pkgdir/$site_packages/"
  cp -a ${srcdir}/llvm-project/clang/bindings/python/clang "$pkgdir/$site_packages/"

  # Move analyzer scripts out of /usr/libexec
  mv "$pkgdir"/usr/libexec/* "$pkgdir/usr/lib/clang/"
  rmdir "$pkgdir/usr/libexec"
  sed -i 's|libexec|lib/clang|' \
    "$pkgdir/usr/bin/scan-build" \
    "$pkgdir/$site_packages/libscanbuild/analyze.py"

  # Compile Python scripts
  _python_optimize "$pkgdir/usr/share" "$pkgdir/$site_packages"

  # (taken from llvm-git aur)
  # optimize other python files except 2 problem cases
  _python_optimize "$pkgdir"/usr/share -x 'clang-include-fixer|run-find-all-symbols'

  install -Dm644 "$srcdir/llvm-project/clang/LICENSE.TXT" "$pkgdir/usr/share/licenses/$pkgname/clang/LICENSE"
  install -Dm644 "$srcdir/llvm-project/clang/CodeOwners.rst" "$pkgdir/usr/share/licenses/$pkgname/clang/CodeOwners.rst"
  install -Dm644 "$srcdir/llvm-project/clang-tools-extra/LICENSE.TXT" "$pkgdir/usr/share/licenses/$pkgname/clang-tools-extra/LICENSE"
  install -Dm644 "$srcdir/llvm-project/clang-tools-extra/CODE_OWNERS.TXT" "$pkgdir/usr/share/licenses/$pkgname/clang-tools-extra/CODE_OWNERS"
  install -Dm644 "${srcdir}/llvm-project/compiler-rt/LICENSE.TXT" "$pkgdir/usr/share/licenses/$pkgname/compiler-rt/LICENSE"
}

package_llvm-libs-minimal-git(){
  pkgdesc='LLVM runtime libraries (git version)'
  depends=(gcc-libs zlib zstd libffi libedit ncurses libxml2)
  #conflicts=(llvm-libs)
  provides=(llvm-libs)
  provides+=(llvm-libs-minimal-git llvm-libs-git)
  optdepends=('llvm-libs: for LLVMgold linker')

  # This is when wee want llvm-libs-minimal-git to conflict with llvm-libs
  #  install -d "$pkgdir/usr/lib"
  #  cp -P \
  #    "$srcdir"/lib{LLVM,LTO,Remarks}*.so* \
  #    "$srcdir"/LLVMgold.so \
  #    "$pkgdir/usr/lib/"
  #
  #  # Symlink LLVMgold.so from /usr/lib/bfd-plugins
  #  # https://bugs.archlinux.org/task/28479
  #  install -d "$pkgdir/usr/lib/bfd-plugins"
  #  ln -s ../LLVMgold.so "$pkgdir/usr/lib/bfd-plugins/LLVMgold.so"

  # This is when we want to have llvm-libs and llvm-libs-minimal-git on the same system
  install -d "$pkgdir/usr/lib"
  cp -P \
    "$srcdir"/libLLVM*.so \
    "$srcdir"/lib{LTO,Remarks}.so* \
    "$pkgdir/usr/lib/"

  install -Dm644 "$srcdir/llvm-project/llvm/LICENSE.TXT" "$pkgdir/usr/share/licenses/$pkgname/LICENSE"
  install -Dm644 "$srcdir/llvm-project/llvm/CREDITS.TXT" "$pkgdir/usr/share/licenses/$pkgname/CREDITS"
  install -Dm644 "$srcdir/llvm-project/llvm/CODE_OWNERS.TXT" "$pkgdir/usr/share/licenses/$pkgname/CODE_OWNERS"
}

# https://bugs.archlinux.org/task/72588?project=1&string=clang
package_clang-libs-minimal-git(){
  pkgdesc='Clang runtime libraries (git version)'
  depends=(llvm-libs-minimal-git)
  # clang-libs doesn't exist in repos at this time, but it's cleaner to provide & conflict it.
  # TODO: Once repo clang-libs comes into existence, verify if changes are needed to this package
  conflicts=(clang-libs)
  provides=(clang-libs)
  provides+=(clang-libs-minimal-git clang-libs-git)

  install -d "$pkgdir/usr/lib"
  cp -P \
    "$srcdir"/lib{clang,clang-cpp}.so* \
    "$pkgdir/usr/lib/"

  install -Dm644 "$srcdir/llvm-project/clang/LICENSE.TXT" "$pkgdir/usr/share/licenses/$pkgname/LICENSE"
  install -Dm644 "$srcdir/llvm-project/clang/CodeOwners.rst" "$pkgdir/usr/share/licenses/$pkgname/CodeOwners.rst"
}

package_spirv-llvm-translator-minimal-git(){
  pkgdesc='Tool and a library for bi-directional translation between SPIR-V and LLVM IR (git version)'
  depends=(llvm-libs-minimal-git spirv-tools-git)
  conflicts=(spirv-llvm-translator)
  provides=(spirv-llvm-translator)
  provides+=(spirv-llvm-translator-minimal-git spirv-llvm-translator-git)

  cp --preserve --recursive "$srcdir"/spirv/* "$pkgdir"/

  install -Dm644 "${srcdir}/SPIRV-LLVM-Translator/LICENSE.TXT" "$pkgdir/usr/share/licenses/$pkgname/LICENSE"
}

sha256sums=('SKIP'
            'SKIP'
            '597dc5968c695bbdbb0eac9e8eb5117fcd2773bc91edf5ec103ecffffab8bc48')

# vim:set ts=8 sts=2 sw=2 et:
