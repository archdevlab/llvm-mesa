# _     _            _        _          _____
#| |__ | | __ _  ___| | _____| | ___   _|___ /
#| '_ \| |/ _` |/ __| |/ / __| |/ / | | | |_ \
#| |_) | | (_| | (__|   <\__ \   <| |_| |___) |
#|_.__/|_|\__,_|\___|_|\_\___/_|\_\\__, |____/
#                                  |___/

#Maintainer: blacksky3 <https://github.com/blacksky3>
#Credits: Evangelos Foutras <evangelos@foutrelis.com>
#Credits: Jan "heftig" Steffens <jan.steffens@gmail.com>

pkgbase=llvm-minimal-git
pkgname=(llvm-minimal-git clang-minimal-git llvm-libs-minimal-git clang-libs-minimal-git)
url='https://llvm.org/'
pkgver=17.0.0
pkgrel=1
_pkgver=17.0.0
llvmcommit=4a5b5bf318a858e07d1916e798adc2a1aebd56d3
arch=(x86_64)
license=('custom:Apache 2.0 with LLVM Exception')
makedepends=(cmake ninja zlib zstd libffi libedit ncurses
             libxml2 python-setuptools python-psutil python-sphinx
             python-recommonmark make git)
options=(staticlibs !lto) # Getting thousands of test failures with LTO
source=(git+https://github.com/llvm/llvm-project.git#commit=$llvmcommit
        llvm-config.h)

pkgver(){
  cd ${srcdir}/llvm-project/llvm/

  # This will almost match the output of `llvm-config --version` when the
  # LLVM_APPEND_VC_REV cmake flag is turned on. The only difference is
  # dash being replaced with underscore because of Pacman requirements.
  local _pkgver=$(awk -F 'MAJOR |MINOR |PATCH |)' \
  'BEGIN { ORS="." ; i=0 } \
  /set\(LLVM_VERSION_/ { print $2 ; i++ ; if (i==2) ORS="" } \
  END { print "\n" }' \
  CMakeLists.txt).r$(git rev-list --count HEAD).g$(git rev-parse --short HEAD)
  echo "$_pkgver"
}

prepare(){
  # Attempt to convert script to Python 3
  2to3 -wn --no-diffs \
    ${srcdir}/llvm-project/clang-tools-extra/clang-include-fixer/find-all-symbols/tool/run-find-all-symbols.py
}

build(){
  cd ${srcdir}/llvm-project/llvm/

  rm -rf build/

  local cmake_args=(
    -Bbuild
    -DCMAKE_BUILD_TYPE=Release
    -DCMAKE_INSTALL_PREFIX=/usr
    -DLLVM_BINUTILS_INCDIR=/usr/include
    -DFFI_INCLUDE_DIR=$(pkg-config --variable=includedir libffi)
    -DLLVM_VERSION_SUFFIX=""
    -DLLVM_APPEND_VC_REV=ON
    -DLLVM_HOST_TRIPLE=$CHOST
    -DLLVM_TARGETS_TO_BUILD="AMDGPU;X86"
    -DLLVM_BUILD_LLVM_DYLIB=ON
    -DLLVM_LINK_LLVM_DYLIB=ON
    -DCLANG_LINK_CLANG_DYLIB=ON
    -DLLVM_DYLIB_COMPONENTS="all"
    -DLLVM_INSTALL_UTILS=ON
    -DLLVM_ENABLE_RTTI=ON
    -DLLVM_ENABLE_FFI=ON
    -DLLVM_USE_PERF=ON
    -DLLVM_INCLUDE_BENCHMARKS=OFF
    -DLLVM_INCLUDE_EXAMPLES=OFF
    -DLLVM_BUILD_DOCS=OFF
    -DLLVM_INCLUDE_DOCS=OFF
    -DLLVM_ENABLE_OCAMLDOC=OFF
    -DLLVM_ENABLE_SPHINX=OFF
    -DLLVM_ENABLE_DOXYGEN=OFF
    -DLLVM_ENABLE_BINDINGS=OFF
    -DLLVM_ENABLE_PROJECTS="compiler-rt;clang-tools-extra;clang"
    -DCOMPILER_RT_INSTALL_PATH=/usr/lib/clang/$_pkgver
    -DLLVM_ENABLE_DUMP=ON
    -DLLVM_LIT_ARGS="$LITFLAGS"" -sv --ignore-fail"
    -Wno-dev
  )

  make -j$(nproc) -C build/
}

_python_optimize(){
  python -m compileall "$@"
  python -O -m compileall "$@"
  python -OO -m compileall "$@"
}

package_llvm-minimal-git(){
  pkgdesc='Collection of modular and reusable compiler and toolchain technologies (git version)'
  depends=(llvm-libs-minimal-git perl)
  optdepends=('python: for using lit (LLVM Integrated Tester)'
              'python-setuptools: for using lit')
  conflicts=(llvm)
  provides=(llvm)
  provides+=(llvm-minimal-git llvm-git)

  make -j$(nproc) DESTDIR="$pkgdir" -C ${srcdir}/llvm-project/llvm/build/ install

  # Include lit for running lit-based tests in other projects
  pushd ${srcdir}/llvm-project/llvm/utils/lit/
  python3 setup.py install --root="$pkgdir" -O1
  popd

  # This is when we want llvm-libs-minimal-git to conflict with llvm-libs
  #  # The runtime libraries go into llvm-libs
  #  mv -f "$pkgdir"/usr/lib/lib{LLVM,LTO,Remarks}*.so* "$srcdir"
  #  mv -f "$pkgdir"/usr/lib/LLVMgold.so "$srcdir"

  # This is when we want to have llvm-libs and llvm-libs-minimal-git on the same system
  # Remove files which conflict with repo llvm-libs
  rm "$pkgdir"/usr/lib/{LLVMgold,lib{LLVM,LTO}}.so
  rm "$pkgdir"/usr/lib/libRemarks.so
  # The llvm runtime libraries go into llvm-libs-minimal-git
  mv -f "$pkgdir"/usr/lib/lib{LLVM-*.so,LTO.so.*,Remarks.so.*} "$srcdir"

  # The clang runtime libraries go into clang-libs-minimal-git
  # https://bugs.archlinux.org/task/72588?project=1&string=clang
  mv -f "$pkgdir"/usr/lib/libclang{,-cpp}.so* "$srcdir"

  # clang-minimal-git files go to a separate package
  mkdir -p "$srcdir"/clang/usr/{bin,include,lib,lib/cmake,share}
  mv -f "$pkgdir"/usr/lib/{libear,libscanbuild,libclang*.a,clang} "$srcdir"/clang/usr/lib
  mv -f "$pkgdir"/usr/lib/cmake/clang "$srcdir"/clang/usr/lib/cmake/
  mv -f "$pkgdir"/usr/include/{clang,clang-tidy,clang-c} "$srcdir"/clang/usr/include/
  mv -f "$pkgdir"/usr/libexec "$srcdir"/clang/usr/
  mv -f "$pkgdir"/usr/bin/{analyze-build,c-index-test,clang*,diagtool,find-all-symbols,git-clang-format,hmaptool,intercept-build,modularize,pp-trace,run-clang-tidy,scan-build,scan-build-py,scan-view} "$srcdir"/clang/usr/bin/
  mv -f "$pkgdir"/usr/share/{clang,man,opt-viewer,scan-build,scan-view} "$srcdir"/clang/usr/share/

  if [[ $CARCH == x86_64 ]]; then
    # Needed for multilib (https://bugs.archlinux.org/task/29951)
    # Header stub is taken from Fedora
    mv "$pkgdir/usr/include/llvm/Config/llvm-config"{,-64}.h
    cp "$srcdir/llvm-config.h" "$pkgdir/usr/include/llvm/Config/llvm-config.h"
  fi

  install -Dm644 "$srcdir/llvm-project/llvm/LICENSE.TXT" "$pkgdir/usr/share/licenses/$pkgname/llvm/LICENSE"
  install -Dm644 "$srcdir/llvm-project/llvm/CREDITS.TXT" "$pkgdir/usr/share/licenses/$pkgname/llvm/CREDITS"
  install -Dm644 "$srcdir/llvm-project/llvm/CODE_OWNERS.TXT" "$pkgdir/usr/share/licenses/$pkgname/llvm/CODE_OWNERS"
}

package_clang-minimal-git(){
  pkgdesc='C language family frontend for LLVM (git version)'
  depends=(llvm-libs-minimal-git clang-libs-minimal-git gcc)
  optdepends=('openmp: OpenMP support in clang with -fopenmp'
              'python: for scan-view, scan-build, git-clang-format, clang-rename and python bindings'
              'llvm-minimal-git: referenced by some clang headers')
  conflicts=(compiler-rt clang)
  provides=(compiler-rt clang clang-analyzer clang-tools-extra)
  provides+=(compiler-rt-minimal-git clang-minimal-git compiler-rt-git clang-git)
  replaces=(clang-analyzer clang-tools-extra)

  cp --preserve --recursive "$srcdir"/clang/* "$pkgdir"/

  # I think it's usefull to have this CLANG Python bindings since we ship complete CLANG
  # If I proove that it's not usefull we will remove the below
  # Move scanbuild-py into site-packages and install Python bindings
  local site_packages=$(python -c "import site; print(site.getsitepackages()[0])")
  install -d "$pkgdir/$site_packages"
  mv "$pkgdir"/usr/lib/{libear,libscanbuild} "$pkgdir/$site_packages/"
  cp -a ${srcdir}/llvm-project/clang/bindings/python/clang "$pkgdir/$site_packages/"
  # Install LLVM Python Bindings but keep this command removed since its llvm-minimal-git
  # We can use this command in a llvm-git spirit
  #  # (taken from llvm-git aur)
  #  cp -a ${srcdir}/llvm-project/llvm/bindings/python/llvm "$pkgdir/$site_packages/"

  # Move analyzer scripts out of /usr/libexec
  mv "$pkgdir"/usr/libexec/* "$pkgdir/usr/lib/clang/"
  rmdir "$pkgdir/usr/libexec"
  sed -i 's|libexec|lib/clang|' \
    "$pkgdir/usr/bin/scan-build" \
    "$pkgdir/$site_packages/libscanbuild/analyze.py"

  # Compile Python scripts
  _python_optimize "$pkgdir/usr/share" "$pkgdir/$site_packages"

  # (taken from llvm-git aur)
  #optimize other python files except 2 problem cases
  _python_optimize "$pkgdir"/usr/share -x 'clang-include-fixer|run-find-all-symbols'

  install -Dm644 "$srcdir/llvm-project/clang/LICENSE.TXT" "$pkgdir/usr/share/licenses/$pkgname/clang/LICENSE"
  install -Dm644 "$srcdir/llvm-project/clang/CodeOwners.rst" "$pkgdir/usr/share/licenses/$pkgname/clang/CodeOwners.rst"
  install -Dm644 "$srcdir/llvm-project/clang-tools-extra/LICENSE.TXT" "$pkgdir/usr/share/licenses/$pkgname/clang-tools-extra/LICENSE"
  install -Dm644 "$srcdir/llvm-project/clang-tools-extra/CODE_OWNERS.TXT" "$pkgdir/usr/share/licenses/$pkgname/clang-tools-extra/CODE_OWNERS"
  install -Dm644 "${srcdir}/llvm-project/compiler-rt/LICENSE.TXT" "$pkgdir/usr/share/licenses/$pkgname/compiler-rt/LICENSE"
}

package_llvm-libs-minimal-git(){
  pkgdesc='LLVM runtime libraries (git version)'
  depends=(gcc-libs zlib zstd libffi libedit ncurses libxml2)
  #conflicts=(llvm-libs)
  provides=(llvm-libs)
  provides+=(llvm-libs-minimal-git llvm-libs-git)
  optdepends=('llvm-libs: for LLVMgold linker')

  # This is when wee want llvm-libs-minimal-git to conflict with llvm-libs
  #  install -d "$pkgdir/usr/lib"
  #  cp -P \
  #    "$srcdir"/lib{LLVM,LTO,Remarks}*.so* \
  #    "$srcdir"/LLVMgold.so \
  #    "$pkgdir/usr/lib/"
  #
  #  # Symlink LLVMgold.so from /usr/lib/bfd-plugins
  #  # https://bugs.archlinux.org/task/28479
  #  install -d "$pkgdir/usr/lib/bfd-plugins"
  #  ln -s ../LLVMgold.so "$pkgdir/usr/lib/bfd-plugins/LLVMgold.so"

  # This is when we want to have llvm-libs and llvm-libs-minimal-git on the same system
  install -d "$pkgdir/usr/lib"
  cp -P \
    "$srcdir"/libLLVM*.so \
    "$srcdir"/lib{LTO,Remarks}.so* \
    "$pkgdir/usr/lib/"

  install -Dm644 "$srcdir/llvm-project/llvm/LICENSE.TXT" "$pkgdir/usr/share/licenses/$pkgname/LICENSE"
  install -Dm644 "$srcdir/llvm-project/llvm/CREDITS.TXT" "$pkgdir/usr/share/licenses/$pkgname/CREDITS"
  install -Dm644 "$srcdir/llvm-project/llvm/CODE_OWNERS.TXT" "$pkgdir/usr/share/licenses/$pkgname/CODE_OWNERS"
}

# https://bugs.archlinux.org/task/72588?project=1&string=clang
package_clang-libs-minimal-git(){
  pkgdesc='Clang runtime libraries (git version)'
  depends=(llvm-libs-minimal-git)
  # clang-libs doesn't exist in repos at this time, but it's cleaner to provide & conflict it.
  # TODO: Once repo clang-libs comes into existence, verify if changes are needed to this package
  conflicts=(clang-libs)
  provides=(clang-libs)
  provides+=(clang-libs-minimal-git clang-libs-git)

  install -d "$pkgdir/usr/lib"
  cp -P \
    "$srcdir"/lib{clang,clang-cpp}.so* \
    "$pkgdir/usr/lib/"

  install -Dm644 "$srcdir/llvm-project/clang/LICENSE.TXT" "$pkgdir/usr/share/licenses/$pkgname/clang/LICENSE"
  install -Dm644 "$srcdir/llvm-project/clang/CodeOwners.rst" "$pkgdir/usr/share/licenses/$pkgname/clang/CodeOwners.rst"
}

sha256sums=('SKIP'
            '597dc5968c695bbdbb0eac9e8eb5117fcd2773bc91edf5ec103ecffffab8bc48')

# vim:set ts=8 sts=2 sw=2 et:
