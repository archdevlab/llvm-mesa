#Maintainer: archdevlab <https://github.com/archdevlab>
#Credits: Evangelos Foutras <evangelos@foutrelis.com>
#Credits: Jan "heftig" Steffens <jan.steffens@gmail.com>
#Credits: Lone_Wolf <lone_wolf@klaas-de-kat.nl>

pkgbase=llvm-minimal-git
pkgname=(llvm-minimal-git llvm-libs-minimal-git compiler-rt-minimal-git clang-minimal-git clang-libs-minimal-git)
url='https://llvm.org/'
pkgver=19.0.0.r492923.g7c460c6205ee
pkgrel=1
_pkgver=19.0.0
commit=7c460c6205eedaa24f77d5de272dfd94dc3e9a38
arch=(x86_64)
license=('custom:Apache 2.0 with LLVM Exception')
makedepends=(cmake ninja zlib zstd libffi libedit ncurses
             libxml2 python-setuptools python-psutil python-sphinx
             python-recommonmark make)
makedepends_x86_64=(lib32-gcc-libs)
options=(staticlibs !lto) # https://github.com/llvm/llvm-project/issues/57740
# https://gitlab.archlinux.org/archlinux/packaging/packages/llvm/-/commit/de2e5eca3b91d3be3baff5f4310420dae9ad0944
# source=(git+https://github.com/llvm/llvm-project.git#commit=$llvmcommit
#         llvm-config.h)
source=(git+https://github.com/llvm/llvm-project.git#commit="${commit}")

# Utilizing LLVM_DISTRIBUTION_COMPONENTS to avoid
# installing static libraries; inspired by Gentoo
_get_distribution_components(){
local target
local include

make help | grep -Po 'install-\K.*(?=-stripped)' | while read -r target; do
    case $target in
        llvm-libraries|clang-libraries|distribution )
            include=0
            ;;
        # shared libraries
        LLVM|LLVMgold )
            include=1
            ;;
        # libraries needed for clang-tblgen
        LLVMDemangle|LLVMSupport|LLVMTableGen )
            include=1
            ;;
        # testing libraries
        LLVMTestingAnnotations|LLVMTestingSupport )
            include=1
      	    ;;
        # exclude static libraries
        LLVM* )
            include=0
            ;;
        # exclude llvm-exegesis (doesn't seem useful without libpfm)
        llvm-exegesis )
            include=0
            ;;
        clang-tidy-headers )
            include=0
            ;;
        clang|clangd|clang-* )
            include=1
            ;;
        clang*|findAllSymbols )
            include=0
            ;;
        # Anything not covered above is included
        * )
            include=1
    esac
    if [ $include -eq 1 ]; then
        echo $target
    fi
done
}

pkgver(){
  cd "${srcdir}"/llvm-project/

  # This will almost match the output of `llvm-config --version` when the
  # LLVM_APPEND_VC_REV cmake flag is turned on. The only difference is
  # dash being replaced with underscore because of Pacman requirements.
  local _pkgver=$(awk -F 'MAJOR |MINOR |PATCH |)' \
  'BEGIN { ORS="." ; i=0 } \
  /set\(LLVM_VERSION_/ { print $2 ; i++ ; if (i==2) ORS="" } \
  END { print "\n" }' \
  cmake/Modules/LLVMVersion.cmake).r$(git rev-list --count HEAD).g$(git rev-parse --short HEAD)
  echo "${_pkgver}"
}

prepare(){
  # Attempt to convert script to Python 3
  2to3 -wn --no-diffs \
    "${srcdir}"/llvm-project/clang-tools-extra/clang-include-fixer/find-all-symbols/tool/run-find-all-symbols.py
}

build(){
export CFLAGS+=" ${CPPFLAGS}"
export CXXFLAGS+=" ${CPPFLAGS}"

  rm -rf "${srcdir}"/llvm-project/.git

  local cmake_args=(
      -G "Unix Makefiles"
      -D CMAKE_BUILD_TYPE=Release
      -D CMAKE_INSTALL_PREFIX=/usr
      -D LLVM_BINUTILS_INCDIR=/usr/include
      -D FFI_INCLUDE_DIR=$(pkg-config --variable=includedir libffi)
      -D LLVM_VERSION_SUFFIX=""
      -D LLVM_APPEND_VC_REV=ON
      -D LLVM_HOST_TRIPLE=$CHOST
      -D LLVM_TARGETS_TO_BUILD="AMDGPU;X86"
      -D LLVM_BUILD_LLVM_DYLIB=ON
      -D LLVM_LINK_LLVM_DYLIB=ON
      -D CLANG_LINK_CLANG_DYLIB=ON
      -D LLVM_DYLIB_COMPONENTS="all"
      -D LLVM_INSTALL_UTILS=ON
      -D LLVM_ENABLE_RTTI=ON
      -D LLVM_ENABLE_FFI=ON
      -D LLVM_USE_PERF=ON
      -D LLVM_INCLUDE_BENCHMARKS=OFF
      -D LLVM_INCLUDE_EXAMPLES=OFF
      -D LLVM_BUILD_DOCS=OFF
      -D LLVM_INCLUDE_DOCS=OFF
      -D LLVM_ENABLE_OCAMLDOC=OFF
      -D LLVM_ENABLE_SPHINX=OFF
      -D LLVM_ENABLE_DOXYGEN=OFF
      -D LLVM_ENABLE_BINDINGS=OFF
      -D LLVM_ENABLE_PROJECTS="compiler-rt;clang-tools-extra;clang"
      -D LLVM_LIT_ARGS="$LITFLAGS"" -sv --ignore-fail"
      -D LLVM_ENABLE_DUMP=ON
      -D COMPILER_RT_INSTALL_PATH=/usr/lib/clang/19
    )

  cmake -B "${srcdir}"/build -S "${srcdir}"/llvm-project/llvm "${cmake_args[@]}" -Wno-dev

  pushd "${srcdir}"/build
  local distribution_components=$(_get_distribution_components | paste -sd\;)
  popd
  test -n "$distribution_components"
  cmake_args+=(-D LLVM_DISTRIBUTION_COMPONENTS="$distribution_components")

  cmake -B "${srcdir}"/build -S "${srcdir}"/llvm-project/llvm "${cmake_args[@]}" -Wno-dev
  make -j$(nproc) -C "${srcdir}"/build
}

_python_optimize(){
  python -m compileall "$@"
  python -O -m compileall "$@"
  python -OO -m compileall "$@"
}

package_llvm-minimal-git(){
  pkgdesc='Collection of modular and reusable compiler and toolchain technologies (git version)'
  depends=(llvm-libs-minimal-git perl)
  optdepends=('python: for using lit (LLVM Integrated Tester)'
              'python-setuptools: for using lit')
  conflicts=(llvm)
  provides=(llvm)
  provides+=(llvm-minimal-git llvm-git)

  make -j$(nproc) -C "${srcdir}"/build DESTDIR="${pkgdir}" install-distribution

  # Include lit for running lit-based tests in other projects
  pushd "${srcdir}"/llvm-project/llvm/utils/lit/
  python3 setup.py install --root="${pkgdir}" -O1
  popd

  # This is when we want llvm-libs-minimal-git to conflict with llvm-libs
  #  # The runtime libraries go into llvm-libs
  # mkdir -p "${srcdir}"/llvm-libs/usr/lib
  #  mv -f "${pkgdir}"/usr/lib/lib{LLVM,LTO,Remarks}*.so* "${srcdir}"/llvm-libs/usr/lib/
  #  mv -f "${pkgdir}"/usr/lib/LLVMgold.so "${srcdir}"/llvm-libs/usr/lib/

  # This is when we want to have llvm-libs and llvm-libs-minimal-git on the same system
  # Remove files which conflict with repo llvm-libs
  mkdir -p "${srcdir}"/llvm-libs/usr/lib
  rm "${pkgdir}"/usr/lib/{LLVMgold,lib{LLVM,LTO}}.so
  rm "${pkgdir}"/usr/lib/libRemarks.so
  # The llvm runtime libraries go into llvm-libs-minimal-git
  mv -f "${pkgdir}"/usr/lib/lib{LLVM-*.so,LLVM.so.*,LTO.so.*,Remarks.so.*} "${srcdir}"/llvm-libs/usr/lib/

  # The clang runtime libraries go into clang-libs-minimal-git
  # https://bugs.archlinux.org/task/72588?project=1&string=clang
  mkdir -p "${srcdir}"/clang-libs/usr/lib
  mv -f "${pkgdir}"/usr/lib/libclang{,-cpp}.so* "${srcdir}"/clang-libs/usr/lib/

  # compiler-rt-minimal-git files go to a separate package
  mkdir -p "${srcdir}"/compiler-rt/usr/lib/clang/19/{include,lib,share}
  mv -f "${pkgdir}"/usr/lib/clang/19/include/fuzzer/ "${srcdir}"/compiler-rt/usr/lib/clang/19/include/
  mv -f "${pkgdir}"/usr/lib/clang/19/include/orc/ "${srcdir}"/compiler-rt/usr/lib/clang/19/include/
  mv -f "${pkgdir}"/usr/lib/clang/19/include/profile/ "${srcdir}"/compiler-rt/usr/lib/clang/19/include/
  mv -f "${pkgdir}"/usr/lib/clang/19/include/sanitizer/ "${srcdir}"/compiler-rt/usr/lib/clang/19/include/
  mv -f "${pkgdir}"/usr/lib/clang/19/include/xray/ "${srcdir}"/compiler-rt/usr/lib/clang/19/include/
  mv -f "${pkgdir}"/usr/lib/clang/19/lib/{i386-pc-linux-gnu,x86_64-pc-linux-gnu} "${srcdir}"/compiler-rt/usr/lib/clang/19/lib/
  mv -f "${pkgdir}"/usr/lib/clang/19/share/ "${srcdir}"/compiler-rt/usr/lib/clang/19/

  # clang-minimal-git files go to a separate package
  mkdir -p "${srcdir}"/clang/usr/{bin,include,lib,lib/cmake,share}
  mv -f "${pkgdir}"/usr/lib/{libear,libscanbuild,clang} "${srcdir}"/clang/usr/lib/
  mv -f "${pkgdir}"/usr/lib/cmake/clang "${srcdir}"/clang/usr/lib/cmake/
  mv -f "${pkgdir}"/usr/include/{clang,clang-c} "${srcdir}"/clang/usr/include/
  mv -f "${pkgdir}"/usr/libexec "${srcdir}"/clang/usr/

  mv -f "${pkgdir}"/usr/bin/{amdgpu-arch,analyze-build,c-index-test,clang*,diagtool,find-all-symbols,git-clang-format,hmaptool,intercept-build,modularize,nvptx-arch,pp-trace,run-clang-tidy,scan-build,scan-build-py,scan-view} "${srcdir}"/clang/usr/bin/
  mv -f "${pkgdir}"/usr/share/{clang,man,opt-viewer,scan-build,scan-view} "${srcdir}"/clang/usr/share/

  # https://gitlab.archlinux.org/archlinux/packaging/packages/llvm/-/commit/de2e5eca3b91d3be3baff5f4310420dae9ad0944
  # if [[ $CARCH == x86_64 ]]; then
  #   # Needed for multilib (https://bugs.archlinux.org/task/29951)
  #   # Header stub is taken from Fedora
  #   mv "${pkgdir}"/usr/include/llvm/Config/llvm-config{,-64}.h
  #   cp "${srcdir}"/llvm-config.h "${pkgdir}"/usr/include/llvm/Config/llvm-config.h
  # fi

  # install license
  install -dm755 "${pkgdir}"/usr/share/licenses/"${pkgname}"
  install -m644 "${srcdir}"/llvm-project/llvm/LICENSE.TXT "${pkgdir}"/usr/share/licenses/"${pkgname}"/LICENSE
  install -m644 "${srcdir}"/llvm-project/llvm/CREDITS.TXT "${pkgdir}"/usr/share/licenses/"${pkgname}"/CREDITS
  install -m644 "${srcdir}"/llvm-project/llvm/CODE_OWNERS.TXT "${pkgdir}"/usr/share/licenses/"${pkgname}"/CODE_OWNERS
}

package_llvm-libs-minimal-git(){
  pkgdesc='LLVM runtime libraries (git version)'
  #depends=(gcc-libs zlib zstd libffi libedit ncurses libxml2)
  #conflicts=(llvm-libs)
  #provides=(llvm-libs)
  # some applications expect llvmgold.so to be present and fail badly if it isn't.
  # adding llvm-libs as depend is the easiest solution
  depends=(gcc-libs zlib zstd libffi libedit ncurses libxml2 llvm-libs)
  provides+=(llvm-libs-minimal-git llvm-libs-git)

  cp --preserve --recursive "${srcdir}"/llvm-libs/* "${pkgdir}"/

  # This is when wee want llvm-libs-minimal-git to conflict with llvm-libs
  #  # Symlink LLVMgold.so from /usr/lib/bfd-plugins
  #  # https://bugs.archlinux.org/task/28479
  #  install -d "${pkgdir}"/usr/lib/bfd-plugins
  #  ln -s ../LLVMgold.so "${pkgdir}"/usr/lib/bfd-plugins/LLVMgold.so


  # install license
  install -dm755 "${pkgdir}"/usr/share/licenses/"${pkgname}"
  install -m644 "${srcdir}"/llvm-project/llvm/LICENSE.TXT "${pkgdir}"/usr/share/licenses/"${pkgname}"/LICENSE
  install -m644 "${srcdir}"/llvm-project/llvm/CREDITS.TXT "${pkgdir}"/usr/share/licenses/"${pkgname}"/CREDITS
  install -m644 "${srcdir}"/llvm-project/llvm/CODE_OWNERS.TXT "${pkgdir}"/usr/share/licenses/"${pkgname}"/CODE_OWNERS
}

package_compiler-rt-minimal-git(){
  pkgdesc='Compiler runtime libraries for clang (git version)'
  depends=(gcc-libs)
  conflicts=(compiler-rt)
  provides=(compiler-rt)
  provides+=(compiler-rt-minimal-git)

  cp --preserve --recursive "${srcdir}"/compiler-rt/* "${pkgdir}"/

  # install license
  install -dm755 "${pkgdir}"/usr/share/licenses/"${pkgname}"
  install -m644 "${srcdir}"/llvm-project/compiler-rt/LICENSE.TXT "${pkgdir}"/usr/share/licenses/"${pkgname}"/LICENSE
  install -m644 "${srcdir}"/llvm-project/compiler-rt/CREDITS.TXT "${pkgdir}"/usr/share/licenses/"${pkgname}"/CREDITS
  install -m644 "${srcdir}"/llvm-project/compiler-rt/CODE_OWNERS.TXT "${pkgdir}"/usr/share/licenses/"${pkgname}"/CODE_OWNERS
}

package_clang-minimal-git(){
  pkgdesc='C language family frontend for LLVM (git version)'
  depends=(llvm-libs-minimal-git clang-libs-minimal-git gcc compiler-rt-minimal-git)
  optdepends=('openmp: OpenMP support in clang with -fopenmp'
              'python: for scan-view, scan-build, git-clang-format, clang-rename and python bindings'
              'llvm-minimal-git: referenced by some clang headers')
  conflicts=(clang)
  provides=(clang clang-analyzer clang-tools-extra)
  provides+=(clang-minimal-git clang-git)
  replaces=(clang-analyzer clang-tools-extra)
  options=(!emptydirs)

  cp --preserve --recursive "${srcdir}"/clang/* "${pkgdir}"/

  # I think it's usefull to have this CLANG Python bindings since we ship complete CLANG
  # If I proove that it's not usefull we will remove the below
  # Move scanbuild-py into site-packages and install Python bindings
  _py=$([[ "$(python -V)" =~ Python[[:space:]]*([0-9]+.[0-9]+) ]] && echo ${BASH_REMATCH[1]})
  local site_packages="/usr/lib/python$_py/site-packages"
  install -d "${pkgdir}"/"${site_packages}"
  mv "${pkgdir}"/usr/lib/{libear,libscanbuild} "${pkgdir}"/"${site_packages}"/
  cp -a "${srcdir}"/llvm-project/clang/bindings/python/clang "${pkgdir}"/"${site_packages}"/

  # Move analyzer scripts out of /usr/libexec
  mv "${pkgdir}"/usr/libexec/* "${pkgdir}"/usr/lib/clang/
  rmdir "${pkgdir}"/usr/libexec
  sed -i 's|libexec|lib/clang|' \
    "${pkgdir}"/usr/bin/scan-build \
    "${pkgdir}"/"${site_packages}"/libscanbuild/analyze.py

  # Compile Python scripts
  _python_optimize "${pkgdir}"/usr/share "${pkgdir}"/"${site_packages}"

  # (taken from llvm-git aur)
  # optimize other python files except 2 problem cases
  _python_optimize "${pkgdir}"/usr/share -x 'clang-include-fixer|run-find-all-symbols'

  # install license
  install -dm755 "${pkgdir}"/usr/share/licenses/"${pkgname}"/{clang,clang-tools-extra}
  install -m644 "${srcdir}"/llvm-project/clang/LICENSE.TXT "${pkgdir}"/usr/share/licenses/"${pkgname}"/clang/LICENSE
  install -m644 "${srcdir}"/llvm-project/clang/CodeOwners.rst "${pkgdir}"/usr/share/licenses/"${pkgname}"/clang/CodeOwners.rst
  install -m644 "${srcdir}"/llvm-project/clang-tools-extra/LICENSE.TXT "${pkgdir}"/usr/share/licenses/"${pkgname}"/clang-tools-extra/LICENSE
  install -m644 "${srcdir}"/llvm-project/clang-tools-extra/CODE_OWNERS.TXT "${pkgdir}"/usr/share/licenses/"${pkgname}"/clang-tools-extra/CODE_OWNERS
}

# https://bugs.archlinux.org/task/72588?project=1&string=clang
package_clang-libs-minimal-git(){
  pkgdesc='Clang runtime libraries (git version)'
  depends=(llvm-libs-minimal-git)
  # the functionality offered by this package is part of the clang repo pacakge.
  # TODO: when/if this functionality is split off from repo clang, verify if changes are needed to this package
  conflicts=(clang-libs)
  provides=(clang-libs)
  provides+=(clang-libs-minimal-git clang-libs-git)

  cp --preserve --recursive "${srcdir}"/clang-libs/* "${pkgdir}"/

  # install license
  install -dm755 "${pkgdir}"/usr/share/licenses/"${pkgname}"
  install -m644 "${srcdir}"/llvm-project/clang/LICENSE.TXT "${pkgdir}"/usr/share/licenses/"${pkgname}"/LICENSE
  install -m644 "${srcdir}"/llvm-project/clang/CodeOwners.rst "${pkgdir}"/usr/share/licenses/"${pkgname}"/CodeOwners.rst
}

sha256sums=(SKIP)

# vim:set ts=8 sts=2 sw=2 et:
